fn large () -> reg u32 {
  stack u32[N] st;
  reg ptr u32[N] t;
  reg u32 i, s, n, tmp;

  reg ptr u32[N] t';

  t = st;
  i = 0;
  n = N - 1;
  n += 1;
  while (i < n) {
    reg u32 i4;
    i4 = i << 2;
    t' += 4;
    t.[i4] = i;

//    reg u32 i4;
//    reg ptr u32[1] ti;
//    i4 = i << 2;
//    ti = t.[i4:1];
//    ti[0] = i;
//    t.[i4:1] = ti;

    i += 1;
  }
  i = 0; s = 0;
  while (i < n) {
    reg u32 i4;
    i4 = i << 2;
    tmp = t.[i4];
    s += tmp; i += 1;
  }
  return s;
}

export fn main() -> reg u32 {
  reg u32 s;
  s = large();
  return s;
}
